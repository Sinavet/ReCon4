# convers.py
import os
import zipfile
import tempfile
from pathlib import Path
from PIL import Image
import streamlit as st

SUPPORTED_EXTS = ('.jpg', '.jpeg', '.png', '.bmp', '.webp', '.tiff', '.heic', '.heif')

def process_convert_mode(uploaded_files):
    uploaded_files = filter_large_files(uploaded_files)
    if uploaded_files and st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤", key="process_convert_btn"):
        st.subheader('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...')
        with tempfile.TemporaryDirectory() as temp_dir:
            all_images = []
            log = []
            st.write("[DEBUG] –°—Ç–∞—Ä—Ç process_convert_mode")
            # --- –°–±–æ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ ---
            for uploaded in uploaded_files:
                if uploaded.name.lower().endswith(".zip"):
                    zip_temp = os.path.join(temp_dir, uploaded.name)
                    with open(zip_temp, "wb") as f:
                        f.write(uploaded.read())
                    with zipfile.ZipFile(zip_temp, "r") as zip_ref:
                        for member in zip_ref.namelist():
                            try:
                                zip_ref.extract(member, temp_dir)
                            except Exception as e:
                                log.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å {member} –∏–∑ {uploaded.name}: {e}")
                    extracted = [file for file in Path(temp_dir).rglob("*") if file.is_file() and file.suffix.lower() in SUPPORTED_EXTS]
                    log.append(f"üì¶ –ê—Ä—Ö–∏–≤ {uploaded.name}: –Ω–∞–π–¥–µ–Ω–æ {len(extracted)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
                    all_images.extend(extracted)
                elif uploaded.name.lower().endswith(SUPPORTED_EXTS):
                    img_temp = os.path.join(temp_dir, uploaded.name)
                    with open(img_temp, "wb") as f:
                        f.write(uploaded.read())
                    all_images.append(Path(img_temp))
                    log.append(f"üñºÔ∏è –§–∞–π–ª {uploaded.name}: –¥–æ–±–∞–≤–ª–µ–Ω.")
                else:
                    log.append(f"‚ùå {uploaded.name}: –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            st.write(f"[DEBUG] –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(all_images)}")
            if not all_images:
                st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –∞—Ä—Ö–∏–≤ —Å –ª–æ–≥–æ–º –æ—à–∏–±–æ–∫
                result_zip = os.path.join(temp_dir, "result_convert.zip")
                with zipfile.ZipFile(result_zip, "w") as zipf:
                    log_path = os.path.join(temp_dir, "log.txt")
                    with open(log_path, "w", encoding="utf-8") as logf:
                        logf.write("\n".join(log))
                    zipf.write(log_path, arcname="log.txt")
                with open(result_zip, "rb") as f:
                    st.session_state["result_zip"] = f.read()
                st.session_state["stats"] = {"total": 0, "converted": 0, "errors": 0}
                st.session_state["log"] = log
            else:
                converted_files = []
                errors = 0
                progress_bar = st.progress(0, text="–§–∞–π–ª—ã...")
                for i, img_path in enumerate(all_images, 1):
                    rel_path = img_path.relative_to(temp_dir)
                    out_path = os.path.join(temp_dir, str(rel_path.with_suffix('.jpg')))
                    out_dir = os.path.dirname(out_path)
                    os.makedirs(out_dir, exist_ok=True)
                    try:
                        img = Image.open(img_path)
                        icc_profile = img.info.get('icc_profile')
                        img = img.convert("RGB")
                        img.save(out_path, "JPEG", quality=100, optimize=True, progressive=True, icc_profile=icc_profile)
                        converted_files.append((out_path, rel_path.with_suffix('.jpg')))
                        log.append(f"‚úÖ {rel_path} ‚Üí {rel_path.with_suffix('.jpg')}")
                    except Exception as e:
                        log.append(f"‚ùå {rel_path}: –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ({e})")
                        errors += 1
                    progress_bar.progress(i / len(all_images), text=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {i}/{len(all_images)}")
                st.write("[DEBUG] –ù–∞—á–∏–Ω–∞—é –∞—Ä—Ö–∏–≤–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
                if converted_files:
                    st.write(f"[DEBUG] files_to_zip: {[src for src, rel in converted_files]}")
                    result_zip = os.path.join(temp_dir, "result_convert.zip")
                    with zipfile.ZipFile(result_zip, "w") as zipf:
                        for src, rel in converted_files:
                            zipf.write(src, arcname=rel)
                        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤—Å–µ–≥–¥–∞
                        log_path = os.path.join(temp_dir, "log.txt")
                        with open(log_path, "w", encoding="utf-8") as logf:
                            logf.write("\n".join(log))
                        zipf.write(log_path, arcname="log.txt")
                    with open(result_zip, "rb") as f:
                        st.session_state["result_zip"] = f.read()
                    st.session_state["stats"] = {
                        "total": len(all_images),
                        "converted": len(converted_files),
                        "errors": errors
                    }
                    st.session_state["log"] = log
                    st.write("[DEBUG] –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∞—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ session_state")
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤ —Ç–æ–ª—å–∫–æ —Å –ª–æ–≥–æ–º –æ—à–∏–±–æ–∫
                    result_zip = os.path.join(temp_dir, "result_convert.zip")
                    with zipfile.ZipFile(result_zip, "w") as zipf:
                        log_path = os.path.join(temp_dir, "log.txt")
                        with open(log_path, "w", encoding="utf-8") as logf:
                            logf.write("\n".join(log))
                        zipf.write(log_path, arcname="log.txt")
                    with open(result_zip, "rb") as f:
                        st.session_state["result_zip"] = f.read()
                    st.session_state["stats"] = {"total": len(all_images), "converted": 0, "errors": errors}
                    st.session_state["log"] = log
                st.write("[DEBUG] –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∞—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ session_state")

    if st.session_state.get("result_zip"):
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤",
            data=st.session_state["result_zip"],
            file_name="converted_images.zip",
            mime="application/zip"
        )
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å –ª–æ–≥ –≤ .txt",
            data="\n".join(st.session_state["log"]),
            file_name="log.txt",
            mime="text/plain"
        )
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
            st.text_area("–õ–æ–≥:", value="\n".join(st.session_state["log"]), height=300, disabled=True)
    else:
        st.write("–ê—Ä—Ö–∏–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω")


# –§–∏–ª—å—Ç—Ä –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
def filter_large_files(uploaded_files):
    MAX_SIZE_MB = 400
    MAX_SIZE_BYTES = MAX_SIZE_MB * 1024 * 1024
    filtered = []
    for f in uploaded_files:
        f.seek(0, 2)
        size = f.tell()
        f.seek(0)
        if size > MAX_SIZE_BYTES:
            st.error(f"–§–∞–π–ª {f.name} –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_SIZE_MB} –ú–ë –∏ –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        else:
            filtered.append(f)
    return filtered
